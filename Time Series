import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from arch import arch_model
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from datetime import datetime, timedelta

# ticker and dates
ticker = 'AAPL'
start = '2014-01-01'
today = datetime.now().date().strftime("%Y-%m-%d")

# historical price data from yahoo
stock_data = yf.download(ticker, start=start, end=today)

returns = 100 * stock_data['Adj Close'].pct_change().dropna()

# plot returns
plt.figure(figsize=(10,4))
plt.plot(returns)
plt.ylabel('Pct Return')
plt.title('AAPL Returns')

# parameters to test in GARCH model
parameters = [(1,0), (2,0), (3,0), (1,1), (2,1), (3,1), (1,2), (2,2), (3,2), (1,3), (2,3), (3,3)]

# AIC test to see which parameter yields the best model
# can change AIC to BIC for a different test, code is the same otherwise
def test_garch_models(returns, parameters):
    best_aic = float("inf")
    best_model = None
    best_parameter = None
    
    for p, q in parameters:
        model = arch_model(returns, p=p, q=q)
        results = model.fit()
        aic = results.aic
        if aic < best_aic:
            best_aic = aic
            best_model = results
            best_parameter = (p, q)    
    return best_model, best_parameter

# get the best parameters
best_model, best_parameter = test_garch_models(returns, parameters)
p, q = best_parameter

# fit garch model
model = arch_model(returns, p=p, q=q)
model_fit = model.fit()
model_fit.summary()

#%%

# rolling forecast origin
rolling_predictions = []
test_size = 365

for i in range(test_size):
    train = returns[:-(test_size-i)]
    model = arch_model(train, p=p, q=q)
    model_fit = model.fit(disp='off')
    pred = model_fit.forecast(horizon=1)
    rolling_predictions.append(np.sqrt(pred.variance.values[-1,:][0]))

rolling_predictions = pd.Series(rolling_predictions, index=returns.index[-365:])

plt.figure(figsize=(10,4))
true, = plt.plot(returns[-365:])
preds, = plt.plot(rolling_predictions)
plt.title('Volatility Prediction', fontsize=20)
plt.legend(['True Returns', 'Predicted Volatility'], fontsize=16)

#%%

# forecast horizon
horizon = 7

# forecast
train = returns
model = arch_model(train, p=p, q=q)
model_fit = model.fit(disp='off')
pred = model_fit.forecast(horizon=horizon)
future_dates = [returns.index[-1] + timedelta(days=i) for i in range(1,horizon+1)]
pred = pd.Series(np.sqrt(pred.variance.values[-1,:]), index=future_dates)
plt.figure(figsize=(10,4))
plt.plot(pred)
plt.title('Volatility 7 Days Prediction', fontsize=20)
